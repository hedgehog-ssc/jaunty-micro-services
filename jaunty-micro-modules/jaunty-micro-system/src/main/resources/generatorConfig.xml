<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <properties resource="./generatorConfig.properties"/>
    <!--<context id="DB2Tables" targetRuntime="MyBatis3">-->
    <context id="Mysql" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 数据库关键字冲突,自动处理 -->
        <property name="autoDelimitKeywords" value="true"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!--
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="${mapper-base}"/>
        </plugin>
        -->
       <!--<plugin type="com.westore.mybatis.generator.plugins.LombokPlugin">-->
            <!--<property name="builder" value="true"/>-->
            <!--<property name="allArgsConstructor" value="false"/>-->
        <!--</plugin>-->
        <!--<plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>-->

        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <jdbcConnection driverClass="${driver-class}" connectionURL="${url}"
                        userId="${username}" password="${password}">
        </jdbcConnection>

        <!-- generate Model -->
        <javaModelGenerator targetPackage="${entity}" targetProject="src/main/java">
            <!-- 增加基础bean的继承操作，将通用属性集成到BaseEntity内部 -->
            <!-- <property name="rootClass" value="${model-base}"/> -->
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- generate XML -->
        <!-- 生成SQL map的XML文件生成器，
            注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
                或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
            targetPackage/targetProject:同javaModelGenerator
        -->
        <sqlMapGenerator targetPackage="${mapper}" targetProject="src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- generate DAO -->
        <javaClientGenerator targetPackage="${dao}" targetProject="src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
                选择的table会生成一下文件：
                1，SQL map文件
                2，生成一个主键类；
                3，除了BLOB和主键的其他字段的类；
                4，包含BLOB的类；
                5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
                6，Mapper接口（可选）

                tableName（必要）：要生成对象的表名；
                注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                    根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                    1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                    2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                    3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                    4，否则，使用指定的大小写格式查询；
                另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
                这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

                可选：
                1，schema：数据库的schema；
                2，catalog：数据库的catalog；
                3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
                4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
                5，enableInsert（默认true）：指定是否生成insert语句；
                6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
                7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
                8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
                9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
                10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
                11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
                12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
                13，modelType：参考context元素的defaultModelType，相当于覆盖；
                14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
                15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

                注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
        -->

        <table tableName="s_role" enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="false"/>
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>

    </context>
</generatorConfiguration>